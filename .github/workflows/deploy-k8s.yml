name: CI/CD Pipeline for Staging

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  REGISTRY: docker.io
  FRONTEND_IMAGE: clms-frontend
  BACKEND_IMAGE: clms-backend
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
            project_two/front-end/package-lock.json
            project_two/front-end/package.json


    - name: Frontend Tests
      run: |
        cd project_two/front-end
        npm ci --prefer-offline --no-audit --progress=false --loglevel=error
        npm test

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, pdo, bcmath

    - name: Backend Tests
      run: |
        cd project_two/back-end
        composer install
        php artisan test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./project_two/front-end
        push: true
        tags: |
          ${{ env.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:staging
          ${{ env.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}

    - name: Build and push Backend
      uses: docker/build-push-action@v5
      with:
        context: ./project_two/back-end
        push: true
        tags: |
          ${{ env.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:staging
          ${{ env.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: staging
    steps:
    - uses: actions/checkout@v4

    - name: Install kubectl
      uses: azure/setup-kubectl@v3

    - name: Set up Kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Update Kubernetes deployment
      run: |
        # Update image tags in deployment files
        sed -i "s|image: .*/${{ env.FRONTEND_IMAGE }}:.*|image: ${{ env.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}|" k8s/frontend/clms-frontend-deployment.yml
        sed -i "s|image: .*/${{ env.BACKEND_IMAGE }}:.*|image: ${{ env.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}|" k8s/backend/clms-backend-deployment.yml
        
        # Apply configurations
        kubectl apply -f k8s/backend/mysql-storage.yml
        kubectl apply -f k8s/backend/mysql-deployment.yml
        kubectl apply -f k8s/backend/mysql-service.yml
        kubectl apply -f k8s/backend/clms-backend-deployment.yml
        kubectl apply -f k8s/backend/clms-backend-service.yml
        kubectl apply -f k8s/frontend/clms-frontend-deployment.yml
        kubectl apply -f k8s/frontend/clms-frontend-service.yml

    - name: Verify deployment
      run: |
        kubectl get pods -n dev
        kubectl get services -n dev
