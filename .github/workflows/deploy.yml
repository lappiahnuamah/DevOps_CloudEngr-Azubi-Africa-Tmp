name: CI/CD Pipeline - Build and Deploy to Docker Hub

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  FRONTEND_IMAGE_NAME: clms-frontend
  BACKEND_IMAGE_NAME: clms-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      # ==========================
      # FRONTEND (Next.js)
      # ==========================
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: 'project_two/front-end/package-lock.json'

      - name: Install Dependencies (Frontend)
        run: |
          cd project_two/front-end
          npm install --package-lock-only
          npm ci

      - name: Build Next.js App
        env:
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          NEXT_PUBLIC_API_URL: http://localhost:8000
          NEXT_PRIVATE_BACKEND_HOST: http://clms_backend:8000
          NODE_ENV: production
        run: |
          cd project_two/front-end
          npm run build

      # ==========================
      # BACKEND (Laravel)
      # ==========================
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, pdo, pdo_mysql, bcmath, curl, intl, gd, zip

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: project_two/back-end/vendor
          key: ${{ runner.os }}-php-${{ hashFiles('project_two/back-end/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install Dependencies (Backend)
        run: |
          cd project_two/back-end
          composer install --no-dev --prefer-dist --optimize-autoloader

      - name: Generate Laravel App Key (if needed)
        run: |
          cd project_two/back-end
          if [ ! -f .env ]; then
            cp .env.example .env
          fi
          php artisan key:generate --force

      # ==========================
      # Docker Setup
      # ==========================
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # ==========================
      # Build & Push Images
      # ==========================
      - name: Build & Push Frontend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./project_two/front-end
          file: ./project_two/front-end/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}
          build-args: |
            SESSION_SECRET=${{ secrets.SESSION_SECRET }}
            NEXT_PUBLIC_API_URL=http://localhost:8000
            NEXT_PRIVATE_BACKEND_HOST=http://clms_backend:8000

      - name: Build & Push Backend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./project_two/back-end
          file: ./project_two/back-end/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:latest
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}

      # ==========================
      # Deployment Summary
      # ==========================
      - name: Image Deployment Summary
        run: |
          echo "ðŸš€ Images successfully built and pushed to Docker Hub!"
          echo "ðŸ“¦ Frontend Image: ${{ env.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest"
          echo "ðŸ“¦ Backend Image: ${{ env.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:latest"
          echo "ðŸ”– Commit SHA: ${{ github.sha }}"
          echo "ðŸ”§ SESSION_SECRET: [HIDDEN]"
