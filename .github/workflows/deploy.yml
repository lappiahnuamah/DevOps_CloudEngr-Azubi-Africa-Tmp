name: CI/CD Pipeline - Build and Deploy to Docker Hub

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  FRONTEND_IMAGE_NAME: clms-frontend
  BACKEND_IMAGE_NAME: clms-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Clean up duplicate lock files
        run: |
          if [ -f "project_two/package-lock.json" ]; then
            rm project_two/package-lock.json
            echo "Removed duplicate package-lock.json from root"
          fi

      # ==========================
      # FRONTEND (Next.js)
      # ==========================
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: 'project_two/front-end/package-lock.json'

      - name: Install Dependencies (Frontend)
        run: |
          cd project_two/front-end
          npm install --package-lock-only
          npm ci --prefer-offline --no-audit --progress=false --loglevel=error

      - name: Build Next.js App
        env:
          SESSION_SECRET: ${{ secrets.SESSION_SECRET || 'github-actions-build-secret-minimum-32-characters-long-for-security' }}
          NEXT_PUBLIC_API_URL: http://localhost:8000
          NEXT_PRIVATE_BACKEND_HOST: http://clms_backend:8000
          NODE_ENV: production
        run: |
          cd project_two/front-end
          npm run build

      # ==========================
      # BACKEND (Laravel)
      # ==========================
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, pdo, pdo_mysql, bcmath, curl, intl, gd, zip

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: project_two/back-end/vendor
          key: ${{ runner.os }}-php-${{ hashFiles('project_two/back-end/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install Dependencies (Backend)
        run: |
          cd project_two/back-end
          composer install --no-dev --prefer-dist --optimize-autoloader


      - name: Prepare Laravel Environment
        run: |
          cd project_two/back-end
          # If .env doesn't exist, copy .env.default
          if [ ! -f .env ]; then
            cp .env.default .env
            echo "Copied .env.default to .env"
          fi

          # Inject secrets into .env
          sed -i "s|\${DB_DATABASE}|${{ secrets.DB_DATABASE }}|g" .env
          sed -i "s|\${DB_USERNAME}|${{ secrets.DB_USERNAME }}|g" .env
          sed -i "s|\${DB_PASSWORD}|${{ secrets.DB_PASSWORD }}|g" .env

          # Generate app key
          php artisan key:generate --force

          # Show the generated key (first 20 chars only for security)
          echo "Laravel app key generated: $(grep APP_KEY .env | cut -c1-20)..."
      # - name: Prepare Laravel Environment
      #   run: |
      #     cd project_two/back-end
      #     # Check if .env exists, if not create a minimal one
      #     if [ ! -f .env ]; then
      #       if [ -f .env.example ]; then
      #         cp .env.example .env
      #         echo "Copied .env.example to .env"
      #       else
      #         echo "Creating minimal .env file for Laravel"
      #         cat > .env << EOF
      #     APP_NAME=Laravel
      #     APP_ENV=production
      #     APP_KEY=
      #     APP_DEBUG=false
      #     APP_URL=http://localhost:8000
          
      #     LOG_CHANNEL=stack
      #     LOG_DEPRECATIONS_CHANNEL=null
      #     LOG_LEVEL=error
          
      #     DB_CONNECTION=mysql
      #     DB_HOST=127.0.0.1
      #     DB_PORT=3306
      #     DB_DATABASE=laravel
      #     DB_USERNAME=root
      #     DB_PASSWORD=
          
      #     CACHE_DRIVER=file
      #     FILESYSTEM_DISK=local
      #     QUEUE_CONNECTION=sync
      #     SESSION_DRIVER=file
      #     SESSION_LIFETIME=120
      #     EOF
      #       fi
      #     fi
          
      #     # Generate app key
      #     php artisan key:generate --force
          
      #     # Show the generated key (first 20 chars only for security)
      #     echo "Laravel app key generated: $(grep APP_KEY .env | cut -c1-20)..."

      # ==========================
      # Docker Setup
      # ==========================
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # ==========================
      # Build & Push Images
      # ==========================
      - name: Build & Push Frontend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./project_two/front-end
          file: ./project_two/front-end/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:v${{ github.run_number }}
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
          build-args: |
            SESSION_SECRET=${{ secrets.SESSION_SECRET || 'github-actions-build-secret-minimum-32-characters-long-for-security' }}
            NEXT_PUBLIC_API_URL=http://localhost:8000
            NEXT_PRIVATE_BACKEND_HOST=http://clms_backend:8000
          cache-from: type=gha
          cache-to: type=gha,mode=max

          
      - name: Build & Push Backend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./project_two/back-end
          file: ./project_two/back-end/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:v${{ github.run_number }}
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

            # ==========================
      # Login to Amazon ECR
      # ==========================
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }}

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2

      # # ==========================
      # # Tag & Push Frontend Image to ECR
      # # ==========================
      # - name: Tag & Push Frontend Image to ECR
      #   run: |
      #     docker tag ${{ env.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:v${{ github.run_number }} ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_FRONTEND_REPO }}:v${{ github.run_number }}
      #     docker tag ${{ env.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_FRONTEND_REPO }}:latest
      #     docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_FRONTEND_REPO }}:v${{ github.run_number }}
      #     docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_FRONTEND_REPO }}:latest

      # # ==========================
      # # Tag & Push Backend Image to ECR
      # # ==========================
      # - name: Tag & Push Backend Image to ECR
      #   run: |
      #     docker tag ${{ env.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:v${{ github.run_number }} ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_BACKEND_REPO }}:v${{ github.run_number }}
      #     docker tag ${{ env.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:latest ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_BACKEND_REPO }}:latest
      #     docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_BACKEND_REPO }}:v${{ github.run_number }}
      #     docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_BACKEND_REPO }}:latest

      # ==========================
      # Deployment Summary
      # ==========================
      - name: Image Deployment Summary
        run: |
          echo "ðŸš€ Images successfully built and pushed to Docker Hub!"
          echo "ðŸ“¦ Frontend Image: ${{ env.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest"
          echo "ðŸ“¦ Backend Image: ${{ env.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:latest"
          echo "ðŸ”– Commit SHA: ${{ github.sha }}"
          echo "ðŸ”§ SESSION_SECRET: [CONFIGURED]"



